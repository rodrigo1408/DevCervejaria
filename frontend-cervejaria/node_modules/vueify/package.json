{
  "_args": [
    [
      {
        "raw": "vueify@^8.5.2",
        "scope": null,
        "escapedName": "vueify",
        "name": "vueify",
        "rawSpec": "^8.5.2",
        "spec": ">=8.5.2 <9.0.0",
        "type": "range"
      },
      "C:\\Users\\rodrigobarreto\\vueprojeto\\crud"
    ]
  ],
  "_from": "vueify@>=8.5.2 <9.0.0",
  "_id": "vueify@8.7.0",
  "_inCache": true,
  "_location": "/vueify",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/vueify-8.7.0.tgz_1467300571686_0.1174769711215049"
  },
  "_npmUser": {
    "name": "yyx990803",
    "email": "yyx990803@gmail.com"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vueify@^8.5.2",
    "scope": null,
    "escapedName": "vueify",
    "name": "vueify",
    "rawSpec": "^8.5.2",
    "spec": ">=8.5.2 <9.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/vueify/-/vueify-8.7.0.tgz",
  "_shasum": "3264eb39562b1e16d8a7689b187673b3c5811e3e",
  "_shrinkwrap": null,
  "_spec": "vueify@^8.5.2",
  "_where": "C:\\Users\\rodrigobarreto\\vueprojeto\\crud",
  "author": {
    "name": "Evan You"
  },
  "bugs": {
    "url": "https://github.com/vuejs/vueify/issues"
  },
  "dependencies": {
    "autoprefixer": "^6.0.3",
    "chalk": "^1.1.1",
    "cssnano": "^3.3.2",
    "de-indent": "^1.0.2",
    "es6-promise": "^3.0.2",
    "hash-sum": "^1.0.2",
    "html-minifier": "^1.4.0",
    "lru-cache": "^2.7.0",
    "object-assign": "^4.0.1",
    "parse5": "^2.1.0",
    "postcss": "^5.0.10",
    "postcss-selector-parser": "^1.3.0",
    "through": "^2.3.6",
    "vue-hot-reload-api": "^1.3.2",
    "vue-template-validator": "^1.0.1"
  },
  "description": "Vue component transform for Browserify",
  "devDependencies": {
    "babel-core": "^6.8.0",
    "babel-plugin-transform-runtime": "^6.6.1",
    "babel-preset-es2015": "^6.6.0",
    "babel-runtime": "^6.0.0",
    "coffee-script": "^1.10.0",
    "jade": "^1.11.0",
    "less": "^2.5.1",
    "mocha": "^2.3.3",
    "node-sass": "^3.3.3",
    "pug": "^2.0.0-alpha6",
    "rewire": "^2.5.1",
    "stylus": "^0.52.4"
  },
  "directories": {},
  "dist": {
    "shasum": "3264eb39562b1e16d8a7689b187673b3c5811e3e",
    "tarball": "https://registry.npmjs.org/vueify/-/vueify-8.7.0.tgz"
  },
  "gitHead": "6d08c98bf1e3db6a866b8a0a5f4fa2b5d7131926",
  "homepage": "https://github.com/vuejs/vueify",
  "keywords": [
    "vue",
    "browserify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "yyx990803",
      "email": "yyx990803@gmail.com"
    }
  ],
  "name": "vueify",
  "optionalDependencies": {},
  "readme": "# vueify [![Build Status](https://circleci.com/gh/vuejs/vueify.svg?style=shield)](https://circleci.com/gh/vuejs/vueify) [![npm version](https://badge.fury.io/js/vueify.svg)](http://badge.fury.io/js/vueify)\n\n> [Browserify](http://browserify.org/) transform for [Vue.js](http://vuejs.org/) components, with scoped CSS and component hot-reloading.\n\nThis transform allows you to write your components in this format:\n\n``` html\n// app.vue\n<style>\n  .red {\n    color: #f00;\n  }\n</style>\n\n<template>\n  <h1 class=\"red\">{{msg}}</h1>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n```\n\nYou can also mix preprocessor languages in the component file:\n\n``` vue\n// app.vue\n<style lang=\"stylus\">\n.red\n  color #f00\n</style>\n\n<template lang=\"jade\">\nh1(class=\"red\") {{msg}}\n</template>\n\n<script lang=\"coffee\">\nmodule.exports =\n  data: ->\n    msg: 'Hello world!'\n</script>\n```\n\nAnd you can import using the `src` attribute:\n\n``` html\n<style lang=\"stylus\" src=\"style.styl\"></style>\n```\n\nUnder the hood, the transform will:\n\n- extract the styles, compile them and insert them with the `insert-css` module.\n- extract the template, compile it and add it to your exported options.\n\nYou can `require()` other stuff in the `<script>` as usual. ~~Note that for CSS-preprocessor @imports, the path should be relative to your project root directory.~~ Starting in 7.0.0, `@import` in LESS, SASS and Stylus files can be either relative to your build tool root working directory, or to the file being edited. Or one can set import paths in options.\n\n## Usage\n\n``` bash\nnpm install vueify --save-dev\nbrowserify -t vueify -e src/main.js -o build/build.js\n```\n\nIf you are using npm 3+ and **babel**, it no longer auto install the peer dependencies. So you will also have to also install the babel-related dependencies:\n\n``` bash\nnpm install\\\n  babel-core\\\n  babel-preset-es2015\\\n  babel-runtime\\\n  babel-plugin-transform-runtime\\\n  --save-dev\n```\n\nAnd this is all you need to do in your main entry file:\n\n``` js\n// main.js\nvar Vue = require('vue')\nvar App = require('./app.vue')\n\nnew Vue({\n  el: 'body',\n  components: {\n    app: App\n  }\n})\n```\n\nIn your HTML:\n\n``` html\n<body>\n  <app></app>\n  <script src=\"build.js\"></script>\n</body>\n```\n\nIf you are using `vueify` in Node:\n\n``` js\nvar fs = require(\"fs\")\nvar browserify = require('browserify')\nvar vueify = require('vueify')\n\nbrowserify('./main.js')\n  .transform(vueify)\n  .bundle()\n  .pipe(fs.createWriteStream(\"bundle.js\"))\n```\n\n## Building for Production\n\nMake sure to have the `NODE_ENV` environment variable set to `\"production\"` when building for production! This strips away unnecessary code (e.g. hot-reload) for smaller bundle size.\n\nIf you are using Gulp, note that `gulp --production` **does not** affect vueify; you still need to explicitly set `NODE_ENV=production`.\n\n## ES2015 when `babel-core` installed\n\nVueify automatically transforms the JavaScript in your `*.vue` components using Babel when it is installed. Write ES2015 today!\n\nThe default Babel (6) options used for Vue.js components are:\n\n``` js\n{\n  \"presets\": [\"es2015\"],\n  \"plugins\": [\"transform-runtime\"]\n}\n```\n\nIf you wish to override this, you can add a `.babelrc` file at the root of your project:\n\n``` json\n{\n  \"presets\": [\"es2015\", \"stage-2\"],\n  \"plugins\": [\"transform-runtime\"]\n}\n```\n\nYou can also configure babel with the `babel` field in `vue.config.js`, which will take the highest priority.\n\n## Enabling Pre-Processors\n\nYou need to install the corresponding node modules to enable the compilation. e.g. to get stylus compiled in your Vue components, do `npm install stylus --save-dev`.\n\nThese are the built-in preprocessors:\n\n- stylus\n- less\n- scss (via `node-sass`, use `sass` in [config section](#configuring-options))\n- jade\n- pug\n- coffee-script (use `coffee` in [config section](#configuring-options))\n\n## Autoprefix by Default\n\nStarting in 5.0.0, all CSS output via vueify will be autoprefixed by default. See [config section](#configuring-options) below on customizing the options.\n\n## PostCSS\n\nVueify uses PostCSS for scoped CSS rewrite and autoprefixing. You can also provide your own PostCSS plugins! See [config section](#configuring-options) below for an example.\n\n## Configuring Options\n\nCreate a `vue.config.js` file at where your build command is run (usually the root level of your project):\n\n``` js\nmodule.exports = {\n  // configure a built-in compiler\n  sass: {\n    includePaths: [...]\n  },\n  // provide your own postcss plugins\n  postcss: [...],\n  // configure autoprefixer\n  autoprefixer: {\n    browsers: ['last 2 versions']\n  },\n  // configure html minification in production mode\n  // see https://github.com/kangax/html-minifier#options-quick-reference\n  htmlMinifier: {\n    // ...\n  },\n  // register custom compilers\n  customCompilers: {\n    // for tags with lang=\"ts\"\n    ts: function (content, cb, compiler, filePath) {\n      // content:  content extracted from lang=\"ts\" blocks\n      // cb:       the callback to call when you're done compiling\n      // compiler: the vueify compiler instance\n      // filePath: the path for the file being compiled\n      //\n      // compile some TypeScript... and when you're done:\n      cb(null, result)\n    }\n  }\n}\n```\n\nExample using custom PostCSS plugin:\n\n``` js\nvar cssnext = require('cssnext')\n\nmodule.exports = {\n  postcss: [cssnext()],\n  // disable autoprefixer since cssnext comes with it\n  autoprefixer: false\n}\n```\n\nAlternatively, if you are using `vueify` in Node and don't want to create a `vue.config.js` file:\n\n``` js\nvar fs = require(\"fs\")\nvar browserify = require('browserify')\nvar vueify = require('vueify')\n\n// apply custom config\nvueify.compiler.applyConfig({\n  // ...same as in vue.config.js\n})\n\nbrowserify('./main.js')\n  .transform(vueify)\n  .bundle()\n  .pipe(fs.createWriteStream(\"bundle.js\"))\n```\n\nOr simply pass configuration object to `vueify` (in Node) (for instance to set sass search paths as in the following example):\n\n``` js\nvar fs = require(\"fs\")\nvar browserify = require('browserify')\nvar vueify = require('vueify')\n\nbrowserify('./main.js')\n  .transform(vueify, {\n    sass: {\n      includePaths: [...]\n    },\n    // ...same as in vue.config.js\n  })\n  .bundle()\n  .pipe(fs.createWriteStream(\"bundle.js\"))\n```\n\n### Scoped CSS\n\n> Experimental\n\nWhen a `<style>` tag has the `scoped` attribute, its CSS will apply to elements of the current component only. This is similar to the style encapsulation found in Shadow DOM, but doesn't require any polyfills. It is achieved by transforming the following:\n\n``` html\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n\nInto the following:\n\n``` html\n<style>\n.example[_v-1] {\n  color: red;\n}\n</style>\n<template>\n  <div class=\"example\" _v-1>hi</div>\n</template>\n```\n\n#### Notes\n\n1. You can include both scoped and non-scoped styles in the same component.\n\n2. A child component's root node will be affected by both the parent's scoped CSS and the child's scoped CSS.\n\n3. Partials are not affected by scoped styles.\n\n### Hot Reload\n\n> Experimental\n\nTo enable hot component reloading, you need to install the [browserify-hmr](https://github.com/AgentME/browserify-hmr) plugin:\n\n``` bash\nnpm install browserify-hmr --save-dev\nwatchify -p browserify-hmr index.js -o bundle.js\n```\n\nA full setup example with hot reloading is available at [vuejs/vueify-example](https://github.com/vuejs/vueify-example).\n\n## Compiler API\n\nThe compiler API (originally `vue-component-compiler`) is also exposed:\n\n``` js\nvar compiler = require('vueify').compiler\n\n// filePath should be an absolute path\ncompiler.compile(fileContent, filePath, function (err, result) {\n  // result is a common js module string\n})\n```\n\n## Syntax Highlighting\n\nCurrently there are syntax highlighting support for [Sublime Text](https://github.com/vuejs/vue-syntax-highlight), [Atom](https://atom.io/packages/language-vue), [Vim](https://github.com/posva/vim-vue), [Visual Studio Code](https://marketplace.visualstudio.com/items/liuji-jim.vue) and [Brackets](https://github.com/pandao/brackets-vue). Contributions for other editors/IDEs are highly appreciated! If you are not using any pre-processors in Vue components, you can also get by by treating `*.vue` files as HTML in your editor.\n\n## Example\n\nFor an example setup using most of the features mentioned above, see [vuejs/vueify-example](https://github.com/vuejs/vueify-example).\n\nIf you use Webpack, there's also [vue-loader](https://github.com/vuejs/vue-loader) that does the same thing.\n\n## Changelog\n\n### 8.5.0\n\n- Now also supports passing in Vueify options via browserify transform options. The options are exactly the same as `vue.config.js`.\n\n### 8.4.0\n\n- Removed peer dependencies. Now vueify simply warns you when you are using a feature that requires a missing dependency.\n\n### 8.3.0\n\n- Added compile-time template syntax validation that catches common errors.\n- Code blocks with base indents are now de-indented before being processed.\n\n### 8.2.0\n\n- Added `htmlMinifier` option in config that allows configuration of HTML minification in production mode.\n- Fixed HTML minification removing `type` attribute for `<input type=\"text\">`.\n\n### 8.1.0\n\n- Vueify now respects `.babelrc` over default options.\n\n### 8.0.0\n\n- `babel-core` is now a peer dependency.\n\n### 7.0.0\n\n- Added relative `@import` path support and import dependency tracking for LESS, SASS & Stylus. Now you can `@import` files using relative paths to the file being edited, and editing these imported files will also trigger watchify rebuild.\n\n- Removed built-in compiler for `myth`. Prefer using PostCSS + CSSNext.\n\n### 6.0.0\n\n- Upgraded to Babel 6. This is a breaking change because the babel configuration is now different.\n\n### 5.0.4\n\n- Added `postcss` option for providing custom PostCSS plugins.\n\n### 5.0.0\n\n- New: CSS output is now autoprefixed by default.\n- Changed: [New config file format](#configuring-options)\n\n### 4.0.0\n\n- Support ES2015 by default.\n\n### 3.0.0\n\n- Added support for [scoped CSS](#scoped-css) and [component hot reloading](#hot-reload).\n\n### 2.0.1\n\n- Built-in lang for ES2015 has been renamed from `es6` to `es`.\n\n- `es` transforms now uses loose mode and optional runtime by default. This means in addition to installing `babel`, you should also install `babel-runtime`.\n\n- Templates and CSS are now non-minified by default. To enable minification, run the build with `NODE_ENV=production`.\n\n- Options for built-in pre-processors can now be configured in `vue.config.js`.\n\n- `vue-component-compiler` has been merged into `vueify`. It is now exposed as `require('vueify').compiler`.\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/vueify.git"
  },
  "scripts": {
    "test": "NODE_ENV=production mocha test/test.js --slow=5000 --timeout=10000"
  },
  "version": "8.7.0"
}
